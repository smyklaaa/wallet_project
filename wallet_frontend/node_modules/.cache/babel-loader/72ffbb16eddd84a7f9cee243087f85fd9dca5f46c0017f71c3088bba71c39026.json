{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Table,TableHead,TableBody,TableRow,TableCell,TextField}from'@mui/joy';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ExpenseTable(){const[expenses,setExpenses]=useState([]);const[filteredExpenses,setFilteredExpenses]=useState([]);const[filters,setFilters]=useState({userId:'',type:'',startDate:'',endDate:''});useEffect(()=>{// Fetch expenses from backend API and setExpenses\n// You can use fetch or axios to make API calls\n// Example:\n// fetchExpenses().then(data => setExpenses(data));\n},[]);useEffect(()=>{// Apply filters to expenses and update filteredExpenses\nconst filtered=expenses.filter(expense=>{// Implement your filter logic here\n// Example:\nreturn(!filters.userId||expense.userId===filters.userId)&&(!filters.type||expense.type===filters.type)&&(!filters.startDate||new Date(expense.date)>=new Date(filters.startDate))&&(!filters.endDate||new Date(expense.date)<=new Date(filters.endDate));});setFilteredExpenses(filtered);},[expenses,filters]);const handleFilterChange=e=>{const{name,value}=e.target;setFilters(prevFilters=>({...prevFilters,[name]:value}));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(TextField,{name:\"userId\",label:\"User ID\",value:filters.userId,onChange:handleFilterChange}),/*#__PURE__*/_jsx(TextField,{name:\"type\",label:\"Type\",value:filters.type,onChange:handleFilterChange}),/*#__PURE__*/_jsx(TextField,{name:\"startDate\",label:\"Start Date\",type:\"date\",value:filters.startDate,onChange:handleFilterChange}),/*#__PURE__*/_jsx(TextField,{name:\"endDate\",label:\"End Date\",type:\"date\",value:filters.endDate,onChange:handleFilterChange}),/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"ID\"}),/*#__PURE__*/_jsx(TableCell,{children:\"User ID\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Amount\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Operation Type\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Type\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Date\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:filteredExpenses.map(expense=>/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:expense.id}),/*#__PURE__*/_jsx(TableCell,{children:expense.userId}),/*#__PURE__*/_jsx(TableCell,{children:expense.amount}),/*#__PURE__*/_jsx(TableCell,{children:expense.operationType}),/*#__PURE__*/_jsx(TableCell,{children:expense.type}),/*#__PURE__*/_jsx(TableCell,{children:expense.date})]},expense.id))})]})]});}export default ExpenseTable;","map":{"version":3,"names":["React","useState","useEffect","Table","TableHead","TableBody","TableRow","TableCell","TextField","jsx","_jsx","jsxs","_jsxs","ExpenseTable","expenses","setExpenses","filteredExpenses","setFilteredExpenses","filters","setFilters","userId","type","startDate","endDate","filtered","filter","expense","Date","date","handleFilterChange","e","name","value","target","prevFilters","children","label","onChange","map","id","amount","operationType"],"sources":["C:/Users/Bebe/Documents/GitHub/wallet_project/wallet_frontend/src/ExpensePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, TableHead, TableBody, TableRow, TableCell, TextField } from '@mui/joy';\r\n\r\nfunction ExpenseTable() {\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [filteredExpenses, setFilteredExpenses] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        userId: '',\r\n        type: '',\r\n        startDate: '',\r\n        endDate: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Fetch expenses from backend API and setExpenses\r\n        // You can use fetch or axios to make API calls\r\n        // Example:\r\n        // fetchExpenses().then(data => setExpenses(data));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Apply filters to expenses and update filteredExpenses\r\n        const filtered = expenses.filter(expense => {\r\n            // Implement your filter logic here\r\n            // Example:\r\n            return (\r\n                (!filters.userId || expense.userId === filters.userId) &&\r\n                (!filters.type || expense.type === filters.type) &&\r\n                (!filters.startDate || new Date(expense.date) >= new Date(filters.startDate)) &&\r\n                (!filters.endDate || new Date(expense.date) <= new Date(filters.endDate))\r\n            );\r\n        });\r\n        setFilteredExpenses(filtered);\r\n    }, [expenses, filters]);\r\n\r\n    const handleFilterChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                name=\"userId\"\r\n                label=\"User ID\"\r\n                value={filters.userId}\r\n                onChange={handleFilterChange}\r\n            />\r\n            <TextField\r\n                name=\"type\"\r\n                label=\"Type\"\r\n                value={filters.type}\r\n                onChange={handleFilterChange}\r\n            />\r\n            <TextField\r\n                name=\"startDate\"\r\n                label=\"Start Date\"\r\n                type=\"date\"\r\n                value={filters.startDate}\r\n                onChange={handleFilterChange}\r\n            />\r\n            <TextField\r\n                name=\"endDate\"\r\n                label=\"End Date\"\r\n                type=\"date\"\r\n                value={filters.endDate}\r\n                onChange={handleFilterChange}\r\n            />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>ID</TableCell>\r\n                        <TableCell>User ID</TableCell>\r\n                        <TableCell>Amount</TableCell>\r\n                        <TableCell>Operation Type</TableCell>\r\n                        <TableCell>Type</TableCell>\r\n                        <TableCell>Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {filteredExpenses.map(expense => (\r\n                        <TableRow key={expense.id}>\r\n                            <TableCell>{expense.id}</TableCell>\r\n                            <TableCell>{expense.userId}</TableCell>\r\n                            <TableCell>{expense.amount}</TableCell>\r\n                            <TableCell>{expense.operationType}</TableCell>\r\n                            <TableCell>{expense.type}</TableCell>\r\n                            <TableCell>{expense.date}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}