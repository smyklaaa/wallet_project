{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme === null || designSystemColorScheme === void 0 ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme === null || designSystemColorScheme === void 0 ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(props) {\n    var _restThemeProp$genera, _theme$generateStyleS;\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = ((_restThemeProp$genera = restThemeProp.generateThemeVars) === null || _restThemeProp$genera === void 0 ? void 0 : _restThemeProp$genera.call(restThemeProp)) || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    });\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n    });\n    const resolvedDefaultColorScheme = (() => {\n      if (typeof defaultColorScheme === 'string') {\n        return defaultColorScheme;\n      }\n      if (defaultMode === 'dark') {\n        return defaultColorScheme.dark;\n      }\n      return defaultColorScheme.light;\n    })();\n    themeProp.defaultColorScheme = resolvedDefaultColorScheme;\n    themeProp.colorSchemeSelector = colorSchemeSelector;\n    themeProp.attribute = attribute;\n    if (!theme.getColorSchemeSelector) {\n      theme.getColorSchemeSelector = targetColorScheme => \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme === null || upperTheme === void 0 ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (((_theme$generateStyleS = theme.generateStyleSheets) === null || _theme$generateStyleS === void 0 ? void 0 : _theme$generateStyleS.call(theme)) || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_formatMuiErrorMessage","_excluded","React","PropTypes","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","colorSchemes","light","dark","console","error","concat","ColorSchemeContext","createContext","undefined","process","env","NODE_ENV","displayName","useColorScheme","value","useContext","Error","CssVarsProvider","props","_restThemeProp$genera","_theme$generateStyleS","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","scopedTheme","_ref","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","stateMode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","stateColorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","themeVars","generateThemeVars","call","vars","generateSpacing","spacing","entries","forEach","_ref2","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","getColorSchemeSelector","targetColorScheme","useEffect","setAttribute","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","generateStyleSheets","map","styles","index","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"sources":["C:/Users/Bebe/Documents/GitHub/wallet_project/wallet_frontend/node_modules/@mui/system/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme?.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme?.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    });\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n    });\n    const resolvedDefaultColorScheme = (() => {\n      if (typeof defaultColorScheme === 'string') {\n        return defaultColorScheme;\n      }\n      if (defaultMode === 'dark') {\n        return defaultColorScheme.dark;\n      }\n      return defaultColorScheme.light;\n    })();\n    themeProp.defaultColorScheme = resolvedDefaultColorScheme;\n    themeProp.colorSchemeSelector = colorSchemeSelector;\n    themeProp.attribute = attribute;\n    if (!theme.getColorSchemeSelector) {\n      theme.getColorSchemeSelector = targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`;\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}